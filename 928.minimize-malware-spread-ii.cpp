/*
 * @lc app=leetcode id=928 lang=cpp
 *
 * [928] Minimize Malware Spread II
 *
 * https://leetcode.com/problems/minimize-malware-spread-ii/description/
 *
 * algorithms
 * Hard (44.59%)
 * Likes:    689
 * Dislikes: 89
 * Total Accepted:    26.6K
 * Total Submissions: 59.7K
 * Testcase Example:  '[[1,1,0],[1,1,0],[0,0,1]]\n[0,1]'
 *
 * You are given a network of n nodes represented as an n x n adjacency matrix
 * graph, where the i^th node is directly connected to the j^th node if
 * graph[i][j] == 1.
 * 
 * Some nodes initial are initially infected by malware. Whenever two nodes are
 * directly connected, and at least one of those two nodes is infected by
 * malware, both nodes will be infected by malware. This spread of malware will
 * continue until no more nodes can be infected in this manner.
 * 
 * Suppose M(initial) is the final number of nodes infected with malware in the
 * entire network after the spread of malware stops.
 * 
 * We will remove exactly one node from initial, completely removing it and any
 * connections from this node to any other node.
 * 
 * Return the node that, if removed, would minimize M(initial). If multiple
 * nodes could be removed to minimize M(initial), return such a node with the
 * smallest index.
 * 
 * 
 * Example 1:
 * Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
 * Output: 0
 * Example 2:
 * Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
 * Output: 1
 * Example 3:
 * Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
 * Output: 1
 * 
 * 
 * Constraints:
 * 
 * 
 * n == graph.length
 * n == graph[i].length
 * 2 <= n <= 300
 * graph[i][j] is 0 or 1.
 * graph[i][j] == graph[j][i]
 * graph[i][i] == 1
 * 1 <= initial.length < n
 * 0 <= initial[i] <= n - 1
 * All the integers in initial are unique.
 * 
 * 
 */

#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& g, vector<int>& init) {
        int n = g.size(), res = *min_element(init.begin(), init.end()), mn = n+1;
        sort(init.begin(), init.end());
        for (int ban : init) {
            vector<int> vis(n);
            queue<int> q;
            for (int x : init) if (x != ban) q.push(x), vis[x] = 1;
            while (!q.empty()) {
                int u = q.front(); q.pop();
                for (int v = 0; v < n; ++v) if (g[u][v] && !vis[v] && v != ban) vis[v] = 1, q.push(v);
            }
            int cnt = 0;
            for (int i = 0; i < n; ++i) cnt += vis[i];
            if (cnt < mn) mn = cnt, res = ban;
        }
        return res;
    }
};

